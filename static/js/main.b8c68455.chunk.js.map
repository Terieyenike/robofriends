{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","components/Footer.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","email","name","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","ErrorBoundary","state","hasError","this","setState","props","children","Component","Scroll","style","overflowY","border","height","Footer","href","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","e","payload","target","value","fetch","then","res","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b8c68455.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, email, name }) => {\n  return (\n    <div className='pointer tc bg-light-blue dib br4 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' className=\"w-100\" />\n      <div className='details'>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  /* if (false) {\n    throw new Error('NOOOOOOO!!!');\n  } */\n\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i.id}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--blue bg-light-blue'\n        type='search'\n        placeholder='Search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch() {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    } else {\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return(\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll","import React from 'react';\n\nconst Footer = () => {\n  let author = 'Oteri Eyenike';\n  let address = \"Lagos, Nigeria\";\n  return (\n    <div>\n      <footer>\n        <address>{address}{' '}&copy; 2020</address>\n        <p>\n          Built by{' '}\n          <a\n            href={`https://twitter.com/codeg0d`}\n            className='link black hover-bg-light-blue b'>\n            {author}\n          </a>\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Scroll from '../components/Scroll';\nimport Footer from '../components/Footer';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: e => dispatch(setSearchField(e.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className='tc'>\n        <h1>Robofriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filterRobots} />\n          </ErrorBoundary>\n        </Scroll>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => {\n      return res.json();\n    })\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error =>\n      dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: error\n      })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots ={\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(rootReducer, applyMiddleware(logger, thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}